/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : D:\\development\\altlr\\grammar\\RFSM.g
 *     -                            On : 2012-04-25 13:43:56
 *     -                 for the lexer : RFSMLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer RFSMLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pRFSMLexer, which is returned from a call to RFSMLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pRFSMLexer are  as follows:
 *
 *  -  void      pRFSMLexer->T__132(pRFSMLexer)
 *  -  void      pRFSMLexer->T__133(pRFSMLexer)
 *  -  void      pRFSMLexer->T__134(pRFSMLexer)
 *  -  void      pRFSMLexer->T__135(pRFSMLexer)
 *  -  void      pRFSMLexer->T__136(pRFSMLexer)
 *  -  void      pRFSMLexer->T__137(pRFSMLexer)
 *  -  void      pRFSMLexer->T__138(pRFSMLexer)
 *  -  void      pRFSMLexer->T__139(pRFSMLexer)
 *  -  void      pRFSMLexer->T__140(pRFSMLexer)
 *  -  void      pRFSMLexer->T__141(pRFSMLexer)
 *  -  void      pRFSMLexer->T__142(pRFSMLexer)
 *  -  void      pRFSMLexer->T__143(pRFSMLexer)
 *  -  void      pRFSMLexer->T__144(pRFSMLexer)
 *  -  void      pRFSMLexer->T__145(pRFSMLexer)
 *  -  void      pRFSMLexer->T__146(pRFSMLexer)
 *  -  void      pRFSMLexer->T__147(pRFSMLexer)
 *  -  void      pRFSMLexer->T__148(pRFSMLexer)
 *  -  void      pRFSMLexer->T__149(pRFSMLexer)
 *  -  void      pRFSMLexer->T__150(pRFSMLexer)
 *  -  void      pRFSMLexer->T__151(pRFSMLexer)
 *  -  void      pRFSMLexer->T__152(pRFSMLexer)
 *  -  void      pRFSMLexer->T__153(pRFSMLexer)
 *  -  void      pRFSMLexer->T__154(pRFSMLexer)
 *  -  void      pRFSMLexer->T__155(pRFSMLexer)
 *  -  void      pRFSMLexer->T__156(pRFSMLexer)
 *  -  void      pRFSMLexer->T__157(pRFSMLexer)
 *  -  void      pRFSMLexer->T__158(pRFSMLexer)
 *  -  void      pRFSMLexer->T__159(pRFSMLexer)
 *  -  void      pRFSMLexer->T__160(pRFSMLexer)
 *  -  void      pRFSMLexer->T__161(pRFSMLexer)
 *  -  void      pRFSMLexer->T__162(pRFSMLexer)
 *  -  void      pRFSMLexer->T__163(pRFSMLexer)
 *  -  void      pRFSMLexer->T__164(pRFSMLexer)
 *  -  void      pRFSMLexer->T__165(pRFSMLexer)
 *  -  void      pRFSMLexer->T__166(pRFSMLexer)
 *  -  void      pRFSMLexer->T__167(pRFSMLexer)
 *  -  void      pRFSMLexer->T__168(pRFSMLexer)
 *  -  void      pRFSMLexer->T__169(pRFSMLexer)
 *  -  void      pRFSMLexer->T__170(pRFSMLexer)
 *  -  void      pRFSMLexer->T__171(pRFSMLexer)
 *  -  void      pRFSMLexer->T__172(pRFSMLexer)
 *  -  void      pRFSMLexer->T__173(pRFSMLexer)
 *  -  void      pRFSMLexer->T__174(pRFSMLexer)
 *  -  void      pRFSMLexer->T__175(pRFSMLexer)
 *  -  void      pRFSMLexer->T__176(pRFSMLexer)
 *  -  void      pRFSMLexer->T__177(pRFSMLexer)
 *  -  void      pRFSMLexer->T__178(pRFSMLexer)
 *  -  void      pRFSMLexer->T__179(pRFSMLexer)
 *  -  void      pRFSMLexer->T__180(pRFSMLexer)
 *  -  void      pRFSMLexer->T__181(pRFSMLexer)
 *  -  void      pRFSMLexer->T__182(pRFSMLexer)
 *  -  void      pRFSMLexer->T__183(pRFSMLexer)
 *  -  void      pRFSMLexer->T__184(pRFSMLexer)
 *  -  void      pRFSMLexer->T__185(pRFSMLexer)
 *  -  void      pRFSMLexer->T__186(pRFSMLexer)
 *  -  void      pRFSMLexer->T__187(pRFSMLexer)
 *  -  void      pRFSMLexer->T__188(pRFSMLexer)
 *  -  void      pRFSMLexer->T__189(pRFSMLexer)
 *  -  void      pRFSMLexer->T__190(pRFSMLexer)
 *  -  void      pRFSMLexer->T__191(pRFSMLexer)
 *  -  void      pRFSMLexer->T__192(pRFSMLexer)
 *  -  void      pRFSMLexer->T__193(pRFSMLexer)
 *  -  void      pRFSMLexer->T__194(pRFSMLexer)
 *  -  void      pRFSMLexer->T__195(pRFSMLexer)
 *  -  void      pRFSMLexer->T__196(pRFSMLexer)
 *  -  void      pRFSMLexer->T__197(pRFSMLexer)
 *  -  void      pRFSMLexer->T__198(pRFSMLexer)
 *  -  void      pRFSMLexer->T__199(pRFSMLexer)
 *  -  void      pRFSMLexer->T__200(pRFSMLexer)
 *  -  void      pRFSMLexer->T__201(pRFSMLexer)
 *  -  void      pRFSMLexer->T__202(pRFSMLexer)
 *  -  void      pRFSMLexer->T__203(pRFSMLexer)
 *  -  void      pRFSMLexer->T__204(pRFSMLexer)
 *  -  void      pRFSMLexer->T__205(pRFSMLexer)
 *  -  void      pRFSMLexer->T__206(pRFSMLexer)
 *  -  void      pRFSMLexer->T__207(pRFSMLexer)
 *  -  void      pRFSMLexer->T__208(pRFSMLexer)
 *  -  void      pRFSMLexer->T__209(pRFSMLexer)
 *  -  void      pRFSMLexer->T__210(pRFSMLexer)
 *  -  void      pRFSMLexer->T__211(pRFSMLexer)
 *  -  void      pRFSMLexer->T__212(pRFSMLexer)
 *  -  void      pRFSMLexer->T__213(pRFSMLexer)
 *  -  void      pRFSMLexer->T__214(pRFSMLexer)
 *  -  void      pRFSMLexer->T__215(pRFSMLexer)
 *  -  void      pRFSMLexer->T__216(pRFSMLexer)
 *  -  void      pRFSMLexer->T__217(pRFSMLexer)
 *  -  void      pRFSMLexer->T__218(pRFSMLexer)
 *  -  void      pRFSMLexer->T__219(pRFSMLexer)
 *  -  void      pRFSMLexer->T__220(pRFSMLexer)
 *  -  void      pRFSMLexer->T__221(pRFSMLexer)
 *  -  void      pRFSMLexer->T__222(pRFSMLexer)
 *  -  void      pRFSMLexer->T__223(pRFSMLexer)
 *  -  void      pRFSMLexer->T__224(pRFSMLexer)
 *  -  void      pRFSMLexer->T__225(pRFSMLexer)
 *  -  void      pRFSMLexer->T__226(pRFSMLexer)
 *  -  void      pRFSMLexer->T__227(pRFSMLexer)
 *  -  void      pRFSMLexer->T__228(pRFSMLexer)
 *  -  void      pRFSMLexer->T__229(pRFSMLexer)
 *  -  void      pRFSMLexer->T__230(pRFSMLexer)
 *  -  void      pRFSMLexer->T__231(pRFSMLexer)
 *  -  void      pRFSMLexer->T__232(pRFSMLexer)
 *  -  void      pRFSMLexer->T__233(pRFSMLexer)
 *  -  void      pRFSMLexer->T__234(pRFSMLexer)
 *  -  void      pRFSMLexer->T__235(pRFSMLexer)
 *  -  void      pRFSMLexer->T__236(pRFSMLexer)
 *  -  void      pRFSMLexer->T__237(pRFSMLexer)
 *  -  void      pRFSMLexer->T__238(pRFSMLexer)
 *  -  void      pRFSMLexer->T__239(pRFSMLexer)
 *  -  void      pRFSMLexer->T__240(pRFSMLexer)
 *  -  void      pRFSMLexer->T__241(pRFSMLexer)
 *  -  void      pRFSMLexer->T__242(pRFSMLexer)
 *  -  void      pRFSMLexer->T__243(pRFSMLexer)
 *  -  void      pRFSMLexer->T__244(pRFSMLexer)
 *  -  void      pRFSMLexer->Identifier(pRFSMLexer)
 *  -  void      pRFSMLexer->STRING_BLOCK(pRFSMLexer)
 *  -  void      pRFSMLexer->DECIMAL_LITERAL(pRFSMLexer)
 *  -  void      pRFSMLexer->STRING_LITERAL(pRFSMLexer)
 *  -  void      pRFSMLexer->FLOATING_POINT_LITERAL(pRFSMLexer)
 *  -  void      pRFSMLexer->WS(pRFSMLexer)
 *  -  void      pRFSMLexer->COMMENT(pRFSMLexer)
 *  -  void      pRFSMLexer->LINE_COMMENT(pRFSMLexer)
 *  -  void      pRFSMLexer->Letter(pRFSMLexer)
 *  -  void      pRFSMLexer->EscapeSequence(pRFSMLexer)
 *  -  void      pRFSMLexer->Exponent(pRFSMLexer)
 *  -  void      pRFSMLexer->FloatTypeSuffix(pRFSMLexer)
 *  -  void      pRFSMLexer->Digit(pRFSMLexer)
 *  -  void      pRFSMLexer->Tokens(pRFSMLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_RFSMLexer_H
#define _RFSMLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "interpreter/RFSMException.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct RFSMLexer_Ctx_struct RFSMLexer, * pRFSMLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for RFSMLexer
 */
struct RFSMLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__132)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__133)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__134)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__135)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__136)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__137)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__138)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__139)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__140)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__141)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__142)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__143)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__144)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__145)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__146)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__147)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__148)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__149)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__150)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__151)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__152)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__153)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__154)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__155)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__156)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__157)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__158)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__159)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__160)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__161)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__162)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__163)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__164)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__165)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__166)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__167)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__168)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__169)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__170)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__171)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__172)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__173)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__174)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__175)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__176)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__177)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__178)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__179)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__180)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__181)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__182)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__183)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__184)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__185)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__186)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__187)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__188)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__189)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__190)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__191)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__192)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__193)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__194)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__195)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__196)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__197)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__198)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__199)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__200)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__201)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__202)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__203)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__204)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__205)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__206)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__207)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__208)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__209)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__210)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__211)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__212)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__213)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__214)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__215)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__216)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__217)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__218)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__219)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__220)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__221)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__222)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__223)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__224)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__225)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__226)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__227)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__228)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__229)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__230)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__231)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__232)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__233)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__234)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__235)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__236)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__237)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__238)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__239)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__240)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__241)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__242)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__243)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mT__244)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mIdentifier)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mSTRING_BLOCK)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mDECIMAL_LITERAL)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mSTRING_LITERAL)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mFLOATING_POINT_LITERAL)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mWS)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mLINE_COMMENT)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mLetter)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mEscapeSequence)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mExponent)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mFloatTypeSuffix)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mDigit)	(struct RFSMLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct RFSMLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct RFSMLexer_Ctx_struct * ctx);
    void	    (*free)   (struct RFSMLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pRFSMLexer RFSMLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pRFSMLexer RFSMLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define T__210      210
#define T__211      211
#define T__212      212
#define T__213      213
#define T__214      214
#define T__215      215
#define T__216      216
#define T__217      217
#define T__218      218
#define T__219      219
#define T__220      220
#define T__221      221
#define T__222      222
#define T__223      223
#define T__224      224
#define T__225      225
#define T__226      226
#define T__227      227
#define T__228      228
#define T__229      229
#define T__230      230
#define T__231      231
#define T__232      232
#define T__233      233
#define T__234      234
#define T__235      235
#define T__236      236
#define T__237      237
#define T__238      238
#define T__239      239
#define T__240      240
#define T__241      241
#define T__242      242
#define T__243      243
#define T__244      244
#define RTDL      4
#define EXPR_ROOT      5
#define INCL      6
#define FNAME      7
#define EXPRPAR      8
#define ASMT      9
#define COND      10
#define OR      11
#define AND      12
#define NOT      13
#define BOOL      14
#define OP      15
#define ADD      16
#define MUL      17
#define SIGN      18
#define STARTBHV      19
#define BEHA      20
#define MEM      21
#define TASK      22
#define CONSTR      23
#define DEST      24
#define ITER      25
#define INI      26
#define FIN      27
#define PARMS      28
#define PARM      29
#define GOTO      30
#define MOVETO      31
#define BHVELEM      32
#define STATE      33
#define SMOD      34
#define CMOD      35
#define SYNMOD      36
#define TRANS      37
#define ACTION      38
#define RUN      39
#define STMTS      40
#define STMTBLOCK      41
#define STMTCALL      42
#define STMTEXPR      43
#define VB      44
#define TNAME      45
#define SNAME      46
#define TYPE      47
#define NAME      48
#define AMOD      49
#define CALL      50
#define CNAME      51
#define CPARAMS      52
#define CPARAM      53
#define IF      54
#define WHENT      55
#define WHENF      56
#define SYMB      57
#define LITE      58
#define ID      59
#define PTYP      60
#define STYP      61
#define WORKER      62
#define DESC      63
#define ENUM      64
#define ELEM      65
#define MODEL      66
#define VAR      67
#define VMOD      68
#define FUNC      69
#define RTN      70
#define LITE_DEC      71
#define LITE_BOO      72
#define LITE_FLO      73
#define LITE_STR      74
#define LVAR      75
#define RVAL      76
#define STAY      77
#define SYNCH      78
#define CONTEXT      79
#define CTXRULE      80
#define SEQ      81
#define PAR      82
#define WITH      83
#define WITHS      84
#define CON      85
#define JTYPE      86
#define EOE      87
#define IVK      88
#define EOB      89
#define EOL      90
#define CONDEOL      91
#define WAIT      92
#define TIME      93
#define CNT      94
#define ELEMS      95
#define PERIOD      96
#define EVTS      97
#define EVT      98
#define UID      99
#define BHVS      100
#define BHV      101
#define BSS      102
#define BS      103
#define BSEQ      104
#define EVT_ID      105
#define BHV_ID      106
#define EVTEXPR      107
#define STRBLOCK      108
#define STPBLOCK      109
#define RSMBLOCK      110
#define SEQ_ELEM      111
#define TO      112
#define MODE      113
#define GOT      114
#define START      115
#define STASK      116
#define MON      117
#define BR      118
#define STRING_LITERAL      119
#define Identifier      120
#define STRING_BLOCK      121
#define DECIMAL_LITERAL      122
#define FLOATING_POINT_LITERAL      123
#define Letter      124
#define Digit      125
#define EscapeSequence      126
#define Exponent      127
#define FloatTypeSuffix      128
#define WS      129
#define COMMENT      130
#define LINE_COMMENT      131
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for RFSMLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
