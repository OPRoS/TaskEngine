/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : D:\\development\\altlr\\grammar\\RFSM.g
 *     -                            On : 2012-04-25 13:43:55
 *     -                for the parser : RFSMParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser RFSMParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pRFSMParser, which is returned from a call to RFSMParserNew().
 *
 * The methods in pRFSMParser are  as follows:
 *
 *  - RFSMParser_rfsm_return      pRFSMParser->rfsm(pRFSMParser)
 *  - RFSMParser_rfsmDef_return      pRFSMParser->rfsmDef(pRFSMParser)
 *  - RFSMParser_includeDef_return      pRFSMParser->includeDef(pRFSMParser)
 *  - RFSMParser_fileNames_return      pRFSMParser->fileNames(pRFSMParser)
 *  - RFSMParser_taskDef_return      pRFSMParser->taskDef(pRFSMParser)
 *  - RFSMParser_taskElements_return      pRFSMParser->taskElements(pRFSMParser)
 *  - RFSMParser_iniblock_return      pRFSMParser->iniblock(pRFSMParser)
 *  - RFSMParser_finblock_return      pRFSMParser->finblock(pRFSMParser)
 *  - RFSMParser_runblock_return      pRFSMParser->runblock(pRFSMParser)
 *  - RFSMParser_enumDef_return      pRFSMParser->enumDef(pRFSMParser)
 *  - RFSMParser_enumElement_return      pRFSMParser->enumElement(pRFSMParser)
 *  - RFSMParser_modelDef_return      pRFSMParser->modelDef(pRFSMParser)
 *  - RFSMParser_modelElem_return      pRFSMParser->modelElem(pRFSMParser)
 *  - RFSMParser_varDef_return      pRFSMParser->varDef(pRFSMParser)
 *  - RFSMParser_varModifier_return      pRFSMParser->varModifier(pRFSMParser)
 *  - RFSMParser_funcDef_return      pRFSMParser->funcDef(pRFSMParser)
 *  - RFSMParser_actionDef_return      pRFSMParser->actionDef(pRFSMParser)
 *  - RFSMParser_bhvDeclaration_return      pRFSMParser->bhvDeclaration(pRFSMParser)
 *  - RFSMParser_statesList_return      pRFSMParser->statesList(pRFSMParser)
 *  - RFSMParser_bhvElement_return      pRFSMParser->bhvElement(pRFSMParser)
 *  - RFSMParser_parameterDecl_return      pRFSMParser->parameterDecl(pRFSMParser)
 *  - RFSMParser_parameter_return      pRFSMParser->parameter(pRFSMParser)
 *  - RFSMParser_type_return      pRFSMParser->type(pRFSMParser)
 *  - RFSMParser_modelType_return      pRFSMParser->modelType(pRFSMParser)
 *  - RFSMParser_connectorDef_return      pRFSMParser->connectorDef(pRFSMParser)
 *  - RFSMParser_conElement_return      pRFSMParser->conElement(pRFSMParser)
 *  - RFSMParser_conDeclaration_return      pRFSMParser->conDeclaration(pRFSMParser)
 *  - RFSMParser_joinMod_return      pRFSMParser->joinMod(pRFSMParser)
 *  - RFSMParser_synModifier_return      pRFSMParser->synModifier(pRFSMParser)
 *  - RFSMParser_conMod_return      pRFSMParser->conMod(pRFSMParser)
 *  - RFSMParser_event_block_return      pRFSMParser->event_block(pRFSMParser)
 *  - RFSMParser_event_return      pRFSMParser->event(pRFSMParser)
 *  - RFSMParser_bhv_block_return      pRFSMParser->bhv_block(pRFSMParser)
 *  - RFSMParser_bhv_return      pRFSMParser->bhv(pRFSMParser)
 *  - RFSMParser_ta_block_return      pRFSMParser->ta_block(pRFSMParser)
 *  - RFSMParser_bs_block_return      pRFSMParser->bs_block(pRFSMParser)
 *  - RFSMParser_bs_desc_return      pRFSMParser->bs_desc(pRFSMParser)
 *  - RFSMParser_goto_target_return      pRFSMParser->goto_target(pRFSMParser)
 *  - RFSMParser_bhv_seq_return      pRFSMParser->bhv_seq(pRFSMParser)
 *  - RFSMParser_seq_elem_return      pRFSMParser->seq_elem(pRFSMParser)
 *  - RFSMParser_bhv_con_return      pRFSMParser->bhv_con(pRFSMParser)
 *  - RFSMParser_con_bhvs_return      pRFSMParser->con_bhvs(pRFSMParser)
 *  - RFSMParser_joinOp_return      pRFSMParser->joinOp(pRFSMParser)
 *  - RFSMParser_ref_evt_return      pRFSMParser->ref_evt(pRFSMParser)
 *  - RFSMParser_ref_bhv_return      pRFSMParser->ref_bhv(pRFSMParser)
 *  - RFSMParser_mon_bhv_return      pRFSMParser->mon_bhv(pRFSMParser)
 *  - RFSMParser_mon_op_return      pRFSMParser->mon_op(pRFSMParser)
 *  - RFSMParser_sce_act_stmts_return      pRFSMParser->sce_act_stmts(pRFSMParser)
 *  - RFSMParser_stateDeclaration_return      pRFSMParser->stateDeclaration(pRFSMParser)
 *  - RFSMParser_stateModifier_return      pRFSMParser->stateModifier(pRFSMParser)
 *  - RFSMParser_stateBodyDecl_return      pRFSMParser->stateBodyDecl(pRFSMParser)
 *  - RFSMParser_varblock_return      pRFSMParser->varblock(pRFSMParser)
 *  - RFSMParser_transitionBody_return      pRFSMParser->transitionBody(pRFSMParser)
 *  - RFSMParser_conblock_return      pRFSMParser->conblock(pRFSMParser)
 *  - RFSMParser_desblock_return      pRFSMParser->desblock(pRFSMParser)
 *  - RFSMParser_actionBody_return      pRFSMParser->actionBody(pRFSMParser)
 *  - RFSMParser_actionModifier_return      pRFSMParser->actionModifier(pRFSMParser)
 *  - RFSMParser_actstmt_return      pRFSMParser->actstmt(pRFSMParser)
 *  - RFSMParser_decstmt_return      pRFSMParser->decstmt(pRFSMParser)
 *  - RFSMParser_actstmt_block_return      pRFSMParser->actstmt_block(pRFSMParser)
 *  - RFSMParser_decstmt_block_return      pRFSMParser->decstmt_block(pRFSMParser)
 *  - RFSMParser_stmt_seq_return      pRFSMParser->stmt_seq(pRFSMParser)
 *  - RFSMParser_stmt_parallel_return      pRFSMParser->stmt_parallel(pRFSMParser)
 *  - RFSMParser_stmt_with_return      pRFSMParser->stmt_with(pRFSMParser)
 *  - RFSMParser_run_attrs_return      pRFSMParser->run_attrs(pRFSMParser)
 *  - RFSMParser_stmt_empty_return      pRFSMParser->stmt_empty(pRFSMParser)
 *  - RFSMParser_stmt_break_return      pRFSMParser->stmt_break(pRFSMParser)
 *  - RFSMParser_stmt_expr_return      pRFSMParser->stmt_expr(pRFSMParser)
 *  - RFSMParser_stmt_wait_return      pRFSMParser->stmt_wait(pRFSMParser)
 *  - RFSMParser_stmt_synch_return      pRFSMParser->stmt_synch(pRFSMParser)
 *  - RFSMParser_stmt_call_return      pRFSMParser->stmt_call(pRFSMParser)
 *  - RFSMParser_actstmt_if_return      pRFSMParser->actstmt_if(pRFSMParser)
 *  - RFSMParser_decstmt_if_return      pRFSMParser->decstmt_if(pRFSMParser)
 *  - RFSMParser_stmt_localVarDef_return      pRFSMParser->stmt_localVarDef(pRFSMParser)
 *  - RFSMParser_stmt_trans_return      pRFSMParser->stmt_trans(pRFSMParser)
 *  - RFSMParser_gotoState_return      pRFSMParser->gotoState(pRFSMParser)
 *  - RFSMParser_expandBhvCon_return      pRFSMParser->expandBhvCon(pRFSMParser)
 *  - RFSMParser_expandBhvCon_next_return      pRFSMParser->expandBhvCon_next(pRFSMParser)
 *  - RFSMParser_breakstr_return      pRFSMParser->breakstr(pRFSMParser)
 *  - RFSMParser_gotoLabel_return      pRFSMParser->gotoLabel(pRFSMParser)
 *  - RFSMParser_expr_call_return      pRFSMParser->expr_call(pRFSMParser)
 *  - RFSMParser_parameterValue_return      pRFSMParser->parameterValue(pRFSMParser)
 *  - RFSMParser_expr_return      pRFSMParser->expr(pRFSMParser)
 *  - RFSMParser_expr_cond_return      pRFSMParser->expr_cond(pRFSMParser)
 *  - RFSMParser_expr_or_return      pRFSMParser->expr_or(pRFSMParser)
 *  - RFSMParser_expr_and_return      pRFSMParser->expr_and(pRFSMParser)
 *  - RFSMParser_expr_not_return      pRFSMParser->expr_not(pRFSMParser)
 *  - RFSMParser_expr_rel_return      pRFSMParser->expr_rel(pRFSMParser)
 *  - RFSMParser_expr_add_return      pRFSMParser->expr_add(pRFSMParser)
 *  - RFSMParser_expr_mul_return      pRFSMParser->expr_mul(pRFSMParser)
 *  - RFSMParser_expr_sign_return      pRFSMParser->expr_sign(pRFSMParser)
 *  - RFSMParser_expr_signed_return      pRFSMParser->expr_signed(pRFSMParser)
 *  - RFSMParser_expr_par_return      pRFSMParser->expr_par(pRFSMParser)
 *  - RFSMParser_asmtOp_return      pRFSMParser->asmtOp(pRFSMParser)
 *  - RFSMParser_relOp_return      pRFSMParser->relOp(pRFSMParser)
 *  - RFSMParser_addOp_return      pRFSMParser->addOp(pRFSMParser)
 *  - RFSMParser_mulOp_return      pRFSMParser->mulOp(pRFSMParser)
 *  - RFSMParser_valueType_return      pRFSMParser->valueType(pRFSMParser)
 *  - RFSMParser_literal_return      pRFSMParser->literal(pRFSMParser)
 *  - RFSMParser_symbol_return      pRFSMParser->symbol(pRFSMParser)
 *  - RFSMParser_booleanLiteral_return      pRFSMParser->booleanLiteral(pRFSMParser)
 *  - RFSMParser_primitiveType_return      pRFSMParser->primitiveType(pRFSMParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_RFSMParser_H
#define _RFSMParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "interpreter/RFSMException.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct RFSMParser_Ctx_struct RFSMParser, * pRFSMParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct RFSMParser_rfsm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_rfsm_return;

typedef struct RFSMParser_rfsmDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_rfsmDef_return;

typedef struct RFSMParser_includeDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_includeDef_return;

typedef struct RFSMParser_fileNames_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_fileNames_return;

typedef struct RFSMParser_taskDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_taskDef_return;

typedef struct RFSMParser_taskElements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_taskElements_return;

typedef struct RFSMParser_iniblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_iniblock_return;

typedef struct RFSMParser_finblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_finblock_return;

typedef struct RFSMParser_runblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_runblock_return;

typedef struct RFSMParser_enumDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_enumDef_return;

typedef struct RFSMParser_enumElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_enumElement_return;

typedef struct RFSMParser_modelDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_modelDef_return;

typedef struct RFSMParser_modelElem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_modelElem_return;

typedef struct RFSMParser_varDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_varDef_return;

typedef struct RFSMParser_varModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_varModifier_return;

typedef struct RFSMParser_funcDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_funcDef_return;

typedef struct RFSMParser_actionDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_actionDef_return;

typedef struct RFSMParser_bhvDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bhvDeclaration_return;

typedef struct RFSMParser_statesList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_statesList_return;

typedef struct RFSMParser_bhvElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bhvElement_return;

typedef struct RFSMParser_parameterDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_parameterDecl_return;

typedef struct RFSMParser_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_parameter_return;

typedef struct RFSMParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_type_return;

typedef struct RFSMParser_modelType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_modelType_return;

typedef struct RFSMParser_connectorDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_connectorDef_return;

typedef struct RFSMParser_conElement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_conElement_return;

typedef struct RFSMParser_conDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_conDeclaration_return;

typedef struct RFSMParser_joinMod_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_joinMod_return;

typedef struct RFSMParser_synModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_synModifier_return;

typedef struct RFSMParser_conMod_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_conMod_return;

typedef struct RFSMParser_event_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_event_block_return;

typedef struct RFSMParser_event_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_event_return;

typedef struct RFSMParser_bhv_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bhv_block_return;

typedef struct RFSMParser_bhv_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bhv_return;

typedef struct RFSMParser_ta_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_ta_block_return;

typedef struct RFSMParser_bs_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bs_block_return;

typedef struct RFSMParser_bs_desc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bs_desc_return;

typedef struct RFSMParser_goto_target_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_goto_target_return;

typedef struct RFSMParser_bhv_seq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bhv_seq_return;

typedef struct RFSMParser_seq_elem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_seq_elem_return;

typedef struct RFSMParser_bhv_con_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_bhv_con_return;

typedef struct RFSMParser_con_bhvs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_con_bhvs_return;

typedef struct RFSMParser_joinOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_joinOp_return;

typedef struct RFSMParser_ref_evt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_ref_evt_return;

typedef struct RFSMParser_ref_bhv_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_ref_bhv_return;

typedef struct RFSMParser_mon_bhv_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_mon_bhv_return;

typedef struct RFSMParser_mon_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_mon_op_return;

typedef struct RFSMParser_sce_act_stmts_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_sce_act_stmts_return;

typedef struct RFSMParser_stateDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stateDeclaration_return;

typedef struct RFSMParser_stateModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stateModifier_return;

typedef struct RFSMParser_stateBodyDecl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stateBodyDecl_return;

typedef struct RFSMParser_varblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_varblock_return;

typedef struct RFSMParser_transitionBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_transitionBody_return;

typedef struct RFSMParser_conblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_conblock_return;

typedef struct RFSMParser_desblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_desblock_return;

typedef struct RFSMParser_actionBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_actionBody_return;

typedef struct RFSMParser_actionModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_actionModifier_return;

typedef struct RFSMParser_actstmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_actstmt_return;

typedef struct RFSMParser_decstmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_decstmt_return;

typedef struct RFSMParser_actstmt_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_actstmt_block_return;

typedef struct RFSMParser_decstmt_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_decstmt_block_return;

typedef struct RFSMParser_stmt_seq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_seq_return;

typedef struct RFSMParser_stmt_parallel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_parallel_return;

typedef struct RFSMParser_stmt_with_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_with_return;

typedef struct RFSMParser_run_attrs_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_run_attrs_return;

typedef struct RFSMParser_stmt_empty_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_empty_return;

typedef struct RFSMParser_stmt_break_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_break_return;

typedef struct RFSMParser_stmt_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_expr_return;

typedef struct RFSMParser_stmt_wait_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_wait_return;

typedef struct RFSMParser_stmt_synch_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_synch_return;

typedef struct RFSMParser_stmt_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_call_return;

typedef struct RFSMParser_actstmt_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_actstmt_if_return;

typedef struct RFSMParser_decstmt_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_decstmt_if_return;

typedef struct RFSMParser_stmt_localVarDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_localVarDef_return;

typedef struct RFSMParser_stmt_trans_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_stmt_trans_return;

typedef struct RFSMParser_gotoState_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_gotoState_return;

typedef struct RFSMParser_expandBhvCon_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expandBhvCon_return;

typedef struct RFSMParser_expandBhvCon_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expandBhvCon_next_return;

typedef struct RFSMParser_breakstr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_breakstr_return;

typedef struct RFSMParser_gotoLabel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_gotoLabel_return;

typedef struct RFSMParser_expr_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_call_return;

typedef struct RFSMParser_parameterValue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_parameterValue_return;

typedef struct RFSMParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_return;

typedef struct RFSMParser_expr_cond_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_cond_return;

typedef struct RFSMParser_expr_or_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_or_return;

typedef struct RFSMParser_expr_and_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_and_return;

typedef struct RFSMParser_expr_not_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_not_return;

typedef struct RFSMParser_expr_rel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_rel_return;

typedef struct RFSMParser_expr_add_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_add_return;

typedef struct RFSMParser_expr_mul_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_mul_return;

typedef struct RFSMParser_expr_sign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_sign_return;

typedef struct RFSMParser_expr_signed_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_signed_return;

typedef struct RFSMParser_expr_par_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_expr_par_return;

typedef struct RFSMParser_asmtOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_asmtOp_return;

typedef struct RFSMParser_relOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_relOp_return;

typedef struct RFSMParser_addOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_addOp_return;

typedef struct RFSMParser_mulOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_mulOp_return;

typedef struct RFSMParser_valueType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_valueType_return;

typedef struct RFSMParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_literal_return;

typedef struct RFSMParser_symbol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_symbol_return;

typedef struct RFSMParser_booleanLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_booleanLiteral_return;

typedef struct RFSMParser_primitiveType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RFSMParser_primitiveType_return;



/** Context tracking structure for RFSMParser
 */
struct RFSMParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     RFSMParser_rfsm_return (*rfsm)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_rfsmDef_return (*rfsmDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_includeDef_return (*includeDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_fileNames_return (*fileNames)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_taskDef_return (*taskDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_taskElements_return (*taskElements)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_iniblock_return (*iniblock)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_finblock_return (*finblock)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_runblock_return (*runblock)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_enumDef_return (*enumDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_enumElement_return (*enumElement)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_modelDef_return (*modelDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_modelElem_return (*modelElem)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_varDef_return (*varDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_varModifier_return (*varModifier)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_funcDef_return (*funcDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_actionDef_return (*actionDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bhvDeclaration_return (*bhvDeclaration)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_statesList_return (*statesList)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bhvElement_return (*bhvElement)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_parameterDecl_return (*parameterDecl)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_parameter_return (*parameter)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_type_return (*type)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_modelType_return (*modelType)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_connectorDef_return (*connectorDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_conElement_return (*conElement)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_conDeclaration_return (*conDeclaration)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_joinMod_return (*joinMod)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_synModifier_return (*synModifier)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_conMod_return (*conMod)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_event_block_return (*event_block)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_event_return (*event)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bhv_block_return (*bhv_block)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bhv_return (*bhv)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_ta_block_return (*ta_block)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bs_block_return (*bs_block)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bs_desc_return (*bs_desc)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_goto_target_return (*goto_target)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bhv_seq_return (*bhv_seq)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_seq_elem_return (*seq_elem)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_bhv_con_return (*bhv_con)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_con_bhvs_return (*con_bhvs)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_joinOp_return (*joinOp)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_ref_evt_return (*ref_evt)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_ref_bhv_return (*ref_bhv)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_mon_bhv_return (*mon_bhv)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_mon_op_return (*mon_op)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_sce_act_stmts_return (*sce_act_stmts)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stateDeclaration_return (*stateDeclaration)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stateModifier_return (*stateModifier)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stateBodyDecl_return (*stateBodyDecl)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_varblock_return (*varblock)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_transitionBody_return (*transitionBody)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_conblock_return (*conblock)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_desblock_return (*desblock)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_actionBody_return (*actionBody)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_actionModifier_return (*actionModifier)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_actstmt_return (*actstmt)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_decstmt_return (*decstmt)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_actstmt_block_return (*actstmt_block)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_decstmt_block_return (*decstmt_block)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_seq_return (*stmt_seq)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_parallel_return (*stmt_parallel)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_with_return (*stmt_with)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_run_attrs_return (*run_attrs)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_empty_return (*stmt_empty)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_break_return (*stmt_break)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_expr_return (*stmt_expr)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_wait_return (*stmt_wait)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_synch_return (*stmt_synch)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_call_return (*stmt_call)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_actstmt_if_return (*actstmt_if)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_decstmt_if_return (*decstmt_if)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_localVarDef_return (*stmt_localVarDef)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_stmt_trans_return (*stmt_trans)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_gotoState_return (*gotoState)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expandBhvCon_return (*expandBhvCon)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expandBhvCon_next_return (*expandBhvCon_next)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_breakstr_return (*breakstr)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_gotoLabel_return (*gotoLabel)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_call_return (*expr_call)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_parameterValue_return (*parameterValue)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_return (*expr)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_cond_return (*expr_cond)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_or_return (*expr_or)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_and_return (*expr_and)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_not_return (*expr_not)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_rel_return (*expr_rel)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_add_return (*expr_add)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_mul_return (*expr_mul)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_sign_return (*expr_sign)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_signed_return (*expr_signed)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_expr_par_return (*expr_par)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_asmtOp_return (*asmtOp)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_relOp_return (*relOp)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_addOp_return (*addOp)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_mulOp_return (*mulOp)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_valueType_return (*valueType)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_literal_return (*literal)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_symbol_return (*symbol)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_booleanLiteral_return (*booleanLiteral)	(struct RFSMParser_Ctx_struct * ctx);
     RFSMParser_primitiveType_return (*primitiveType)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred11_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred31_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred40_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred78_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred79_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred92_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred93_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred94_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred102_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred103_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred104_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred110_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred111_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred121_RFSM)	(struct RFSMParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct RFSMParser_Ctx_struct * ctx);
    void	    (*free)   (struct RFSMParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pRFSMParser RFSMParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pRFSMParser RFSMParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define T__210      210
#define T__211      211
#define T__212      212
#define T__213      213
#define T__214      214
#define T__215      215
#define T__216      216
#define T__217      217
#define T__218      218
#define T__219      219
#define T__220      220
#define T__221      221
#define T__222      222
#define T__223      223
#define T__224      224
#define T__225      225
#define T__226      226
#define T__227      227
#define T__228      228
#define T__229      229
#define T__230      230
#define T__231      231
#define T__232      232
#define T__233      233
#define T__234      234
#define T__235      235
#define T__236      236
#define T__237      237
#define T__238      238
#define T__239      239
#define T__240      240
#define T__241      241
#define T__242      242
#define T__243      243
#define T__244      244
#define RTDL      4
#define EXPR_ROOT      5
#define INCL      6
#define FNAME      7
#define EXPRPAR      8
#define ASMT      9
#define COND      10
#define OR      11
#define AND      12
#define NOT      13
#define BOOL      14
#define OP      15
#define ADD      16
#define MUL      17
#define SIGN      18
#define STARTBHV      19
#define BEHA      20
#define MEM      21
#define TASK      22
#define CONSTR      23
#define DEST      24
#define ITER      25
#define INI      26
#define FIN      27
#define PARMS      28
#define PARM      29
#define GOTO      30
#define MOVETO      31
#define BHVELEM      32
#define STATE      33
#define SMOD      34
#define CMOD      35
#define SYNMOD      36
#define TRANS      37
#define ACTION      38
#define RUN      39
#define STMTS      40
#define STMTBLOCK      41
#define STMTCALL      42
#define STMTEXPR      43
#define VB      44
#define TNAME      45
#define SNAME      46
#define TYPE      47
#define NAME      48
#define AMOD      49
#define CALL      50
#define CNAME      51
#define CPARAMS      52
#define CPARAM      53
#define IF      54
#define WHENT      55
#define WHENF      56
#define SYMB      57
#define LITE      58
#define ID      59
#define PTYP      60
#define STYP      61
#define WORKER      62
#define DESC      63
#define ENUM      64
#define ELEM      65
#define MODEL      66
#define VAR      67
#define VMOD      68
#define FUNC      69
#define RTN      70
#define LITE_DEC      71
#define LITE_BOO      72
#define LITE_FLO      73
#define LITE_STR      74
#define LVAR      75
#define RVAL      76
#define STAY      77
#define SYNCH      78
#define CONTEXT      79
#define CTXRULE      80
#define SEQ      81
#define PAR      82
#define WITH      83
#define WITHS      84
#define CON      85
#define JTYPE      86
#define EOE      87
#define IVK      88
#define EOB      89
#define EOL      90
#define CONDEOL      91
#define WAIT      92
#define TIME      93
#define CNT      94
#define ELEMS      95
#define PERIOD      96
#define EVTS      97
#define EVT      98
#define UID      99
#define BHVS      100
#define BHV      101
#define BSS      102
#define BS      103
#define BSEQ      104
#define EVT_ID      105
#define BHV_ID      106
#define EVTEXPR      107
#define STRBLOCK      108
#define STPBLOCK      109
#define RSMBLOCK      110
#define SEQ_ELEM      111
#define TO      112
#define MODE      113
#define GOT      114
#define START      115
#define STASK      116
#define MON      117
#define BR      118
#define STRING_LITERAL      119
#define Identifier      120
#define STRING_BLOCK      121
#define DECIMAL_LITERAL      122
#define FLOATING_POINT_LITERAL      123
#define Letter      124
#define Digit      125
#define EscapeSequence      126
#define Exponent      127
#define FloatTypeSuffix      128
#define WS      129
#define COMMENT      130
#define LINE_COMMENT      131
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for RFSMParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
